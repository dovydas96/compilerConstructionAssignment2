/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. calparser.jj */
/*@egen*//*******************************
 ***** SECTION 1 - OPTIONS *****
 *******************************/

options {
    IGNORE_CASE = true;
    JAVA_UNICODE_ESCAPE = true;
                 
                   
                             
                     
} 


/*********************************
 ***** SECTION 2 - USER CODE *****
 *********************************/

PARSER_BEGIN(CALParser)
import java.io.*;
import java.util.*;

public class CALParser/*@bgen(jjtree)*/implements CALParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCALParserState jjtree = new JJTCALParserState();

/*@egen*/

    public static SymT symbolTable = new SymT();
    public static String scope = "program";


    public static void main(String[] args) throws ParseException {

        // Initialise parser to read
        CALParser parser;
        if (args.length == 0) {

            System.out.println("Reading from standard input...");
            parser = new CALParser(System.in);

        } 
        else if (args.length == 1) {
            try {
                parser = new CALParser(new java.io.FileInputStream(args[0]));

            } 
            catch (java.io.FileNotFoundException e) {
                System.err.println("File " + args[0] + " not found.");
                return;
            }
        } 
        else {
    
            System.out.println("CAL Parser: Usage is one of:");
            System.out.println("    java CALParser < inputfile");
            System.out.println("OR");
            System.out.println("    java CALParser inputfile");
            return;
        }


    // Parse the file
    try {

        SimpleNode root = parser.program();
        System.out.println("Abstract Syntax Tree:");
        root.dump("");

        // Print Symbol Table
        System.out.println("--------------\n|Symbol Table|\n--------------");            
        symbolTable.printSt();
        
        System.out.println();
        // Semantic Analysis
        Scv scv = new Scv();
        root.jjtAccept(scv, symbolTable);

        // 3 Address Code
        System.out.println("-------------------");
        System.out.println("Three Address Code");
        System.out.println("-------------------");   
        //FileWriter fw = new FileWriter();
        String filename = args[0].substring(0, args[0].lastIndexOf(".")) + ".tac";
        Tacs codeGenerator = new Tacs();
        root.jjtAccept(codeGenerator, null);
        System.out.println("Writing IR to file '"+filename + "'");
        try 
        {

            PrintStream out = new PrintStream(new FileOutputStream(filename)); 
            System.setOut(out);

        }
        catch (FileNotFoundException e) 
        {
            e.printStackTrace();
        }
        root.jjtAccept(codeGenerator, null);

    } 
      catch (ParseException e) 
      {
          System.out.println(e.getMessage());
          System.out.println("Encountered errors during parse.");
      }
    }
}

PARSER_END(CALParser)


/*****************************************
 ***** SECTION 3 - TOKEN DEFINITIONS *****
 *****************************************/

TOKEN_MGR_DECLS :
{
    static int commentNesting = 0;
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
    " "
  | "\t"
  | "\n" 
  | "\r" 
  | "\f" 
}

/* Ingore comments */
SKIP : {
    < "//" ([" "-"~"])* ("\n" | "\r" | "\r\n") >
  |   "/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
    "/*" { commentNesting++; }
  | "*/" { commentNesting--;
          if (commentNesting == 0)
              SwitchTo(DEFAULT);
         }
  /* Anything not recognised */
  | <~[]>
}

TOKEN : /* KEYWORDS */
{
    < VARIABLE : "variable" >
  | < CONSTANT : "constant" >
  | < RETURN : "return" >
  | < INTEGER : "integer" >
  | < BOOLEAN : "boolean" >
  | < VOID : "void" >
  | < MAIN : "main" >
  | < IF : "if" >
  | < ELSE : "else" >
  | < TRUE : "true" >
  | < FALSE : "false" >
  | < WHILE : "while" >
  | < SKP : "skip" >
  | < COMMA : "," >
  | < SEMIC : ";" >
  | < COLON : ":" >
  | < ASSIGN : ":=" >
  | < BEGIN : "begin" >
  | < IS : "is" > 
  | < END : "end" >
  | < LBR : "(" >
  | < RBR : ")" >
  | < PLUS : "+" >
  | < MINUS : "-" >
  | < NOT : "~" >
  | < OR : "|" >
  | < AND : "&" >
  | < EQUAL : "=" >
  | < NOT_EQUAL : "!=" >
  | < LESS_THAN : "<" >
  | < LESS_THAN_EQUAL_TO : "<=" >
  | < GREATER_THAN : ">" >
  | < GREATER_THAN_EQUAL_TO : ">=" >
}

TOKEN : /* VALUES */
{
    < #DIGIT: ["0"-"9"] >
  | < NUMBER: ( ("-")? ["1"-"9"] (<DIGIT>)* ) |  "0" >
  | < #LETTER: ["a"-"z"] >
  | < ID: <LETTER> ( <LETTER> | <DIGIT> | "_" )* >
}


TOKEN : /* Anything not recognised so far */
{
    < OTHER : ~[] >
}

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/

SimpleNode program()          : {/*@bgen(jjtree) Program */
  Program jjtn000 = new Program(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    decl_list() function_list() main() <EOF>/*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
                                             }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void decl_list() : {}
{
    [decl() <SEMIC> decl_list()]
}

void decl() : {}
{
    var_decl()
|   const_decl()
}

void var_decl()      : {/*@bgen(jjtree) Var */
                        Var jjtn000 = new Var(JJTVAR);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;}
{/*@bgen(jjtree) Var */
    try {
/*@egen*/
    t = <VARIABLE> id = id() <COLON> type = type()/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/ { jjtn000.value = t.image; symbolTable.put(id,type,"var",scope); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void const_decl()        :  {/*@bgen(jjtree) Const */
                             Const jjtn000 = new Const(JJTCONST);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String id; String type;}
{/*@bgen(jjtree) Const */
  try {
/*@egen*/
  t = <CONSTANT> id = id() <COLON> type = type() <ASSIGN> expression()/*@bgen(jjtree)*/
                                                                       {
                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                         jjtc000 = false;
                                                                       }
/*@egen*/ {jjtn000.value = t.image; symbolTable.put(id,type,"const",scope);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void function_list() : {}
{
    ( (function() function_list()) )?
}

void function()           : {/*@bgen(jjtree) Function */
                             Function jjtn000 = new Function(JJTFUNCTION);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String type; String id;}
{/*@bgen(jjtree) Function */
    try {
/*@egen*/
    type = type() id = id() {symbolTable.put(id,type,"function",scope);
    scope=id; }
    <LBR> parameter_list() <RBR>
    <IS>
    decl_list()
    <BEGIN>
    statement_block()
    <RETURN> <LBR> ( expression() )? <RBR> <SEMIC>
    <END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

String type()       : {/*@bgen(jjtree) Type */
                       Type jjtn000 = new Type(JJTTYPE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; }
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    t = <INTEGER>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { jjtn000.value = t.image; return t.image; }
|   t = <BOOLEAN>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { jjtn000.value = t.image; return t.image;}
|   t = <VOID>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void parameter_list() : {}
{
    ( nemp_parameter_list() )?
}

void nemp_parameter_list()               : {/*@bgen(jjtree) #NParamList(true) */
                                            NParamList jjtn000 = new NParamList(JJTNPARAMLIST);
                                            boolean jjtc000 = true;
                                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String type; String id;}
{/*@bgen(jjtree) #NParamList(true) */
    try {
/*@egen*/
    id = id() <COLON> type = type() nemp_parameter_list_choice()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { symbolTable.put(id,type,"param",scope); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void nemp_parameter_list_choice() : {}
{
    ( <COMMA> nemp_parameter_list() )?
}

void main()       : {/*@bgen(jjtree) Main */
  Main jjtn000 = new Main(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Main */
    try {
/*@egen*/
    {scope = "main";}
    <MAIN>
    <BEGIN>
    decl_list()
    statement_block()
    <END>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void statement_block() : {}
{
    ( statement() statement_block() )?
}

void statement()            : {/*@bgen(jjtree) Statement */
                               Statement jjtn000 = new Statement(JJTSTATEMENT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Statement */
    try {
/*@egen*/
    id() statement_choice()    
|   <BEGIN> statement_block() <END>
|   t = <IF> condition() <BEGIN> statement_block() <END> <ELSE> <BEGIN> statement_block() <END>/*@bgen(jjtree)*/
                                                                                                {
                                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                                  jjtc000 = false;
                                                                                                }
/*@egen*/ {jjtn000.value = t.image;}
|   t = <WHILE> condition() <BEGIN> statement_block() <END>/*@bgen(jjtree)*/
                                                            {
                                                              jjtree.closeNodeScope(jjtn000, true);
                                                              jjtc000 = false;
                                                            }
/*@egen*/ {jjtn000.value = t.image;}
|   <SKP> <SEMIC>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

void statement_choice() : {Token t;}
{
    t = <ASSIGN> expression() <SEMIC>/*@bgen(jjtree) Assign */
                                      {
                                        Assign jjtn001 = new Assign(JJTASSIGN);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
                                      }
                                      try {
/*@egen*//*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn001, true);
                                        jjtc001 = false;
                                      }
/*@egen*/ {jjtn001.value=t.image;}/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001, true);
                                        }
                                      }
/*@egen*/        
|   t = <LBR> arg_list() <RBR>/*@bgen(jjtree) ArgAssign */
                               {
                                 ArgAssign jjtn002 = new ArgAssign(JJTARGASSIGN);
                                 boolean jjtc002 = true;
                                 jjtree.openNodeScope(jjtn002);
                               }
                               try {
/*@egen*/ <SEMIC>/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc002) {
                                   jjtree.closeNodeScope(jjtn002, true);
                                 }
                               }
/*@egen*/           
|   {}

}

void expression() : {}
{
    fragment() ( binary_arith_op() fragment() )?
}


void binary_arith_op() : {Token t;}
{
    t = <PLUS>/*@bgen(jjtree) Add */
               {
                 Add jjtn001 = new Add(JJTADD);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*//*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtc001 = false;
               }
/*@egen*/ {jjtn001.value = t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
               }
/*@egen*/     
  | t = <MINUS>/*@bgen(jjtree) Subtract */
                {
                  Subtract jjtn002 = new Subtract(JJTSUBTRACT);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn002, true);
                  jjtc002 = false;
                }
/*@egen*/ {jjtn002.value = t.image; }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
                }
/*@egen*/          
}

void fragment() : {Token t;}
{/*@bgen(jjtree) FuncReturn */
    {
      FuncReturn jjtn001 = new FuncReturn(JJTFUNCRETURN);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (t = <ID> ( LOOKAHEAD(2) <LBR> arg_list() <RBR> )?/*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn001, true);
                                                         jjtc001 = false;
                                                       }
/*@egen*/ {jjtn001.value = t.image;})/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/            
|   <MINUS>/*@bgen(jjtree) Subtract */
            {
              Subtract jjtn002 = new Subtract(JJTSUBTRACT);
              boolean jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
            }
            try {
/*@egen*/ id()/*@bgen(jjtree)*/
            } catch (Throwable jjte002) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte002 instanceof RuntimeException) {
                throw (RuntimeException)jjte002;
              }
              if (jjte002 instanceof ParseException) {
                throw (ParseException)jjte002;
              }
              throw (Error)jjte002;
            } finally {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
              }
            }
/*@egen*/          
|   number()
|   bool()
|   <BEGIN> expression() <END>
}


void condition() : {}
{
    condition_simple() condition_choice()
}

void condition_choice()  : {Token t;}
{
    t = <AND> condition()/*@bgen(jjtree) AndCon */
                          {
                            AndCon jjtn001 = new AndCon(JJTANDCON);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtc001 = false;
                          }
/*@egen*/ {jjtn001.value = t.image; }/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
                          }
/*@egen*/        
|   t = <OR> condition()/*@bgen(jjtree) OrCon */
                         {
                           OrCon jjtn002 = new OrCon(JJTORCON);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtc002 = false;
                         }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
                         }
/*@egen*/       
|   {}
}

void condition_simple() : {}
{
    <NOT> condition()
|   LOOKAHEAD(2) <LBR> condition() <RBR>
|   expression() comp_op() condition_choice()
}

void comp_op()       : {/*@bgen(jjtree) Comp */
                        Comp jjtn000 = new Comp(JJTCOMP);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Comp */
    try {
/*@egen*/
    t = <EQUAL> expression()/*@bgen(jjtree) Equal */
                              {
                                Equal jjtn001 = new Equal(JJTEQUAL);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtc001 = false;
                              }
/*@egen*/  {jjtn001.value = t.image;}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
                              }
/*@egen*/       
|   t = <NOT_EQUAL> expression()/*@bgen(jjtree) NotEqual */
                                 {
                                   NotEqual jjtn002 = new NotEqual(JJTNOTEQUAL);
                                   boolean jjtc002 = true;
                                   jjtree.openNodeScope(jjtn002);
                                 }
                                 try {
/*@egen*//*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn002, true);
                                   jjtc002 = false;
                                 }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc002) {
                                     jjtree.closeNodeScope(jjtn002, true);
                                   }
                                 }
/*@egen*/          
|   t = <LESS_THAN> expression()/*@bgen(jjtree) LessThan */
                                 {
                                   LessThan jjtn003 = new LessThan(JJTLESSTHAN);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
                                 }
                                 try {
/*@egen*//*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn003, true);
                                   jjtc003 = false;
                                 }
/*@egen*/ {jjtn003.value = t.image;}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003, true);
                                   }
                                 }
/*@egen*/          
|   t = <LESS_THAN_EQUAL_TO> expression()/*@bgen(jjtree) LessThanEqualTo */
                                          {
                                            LessThanEqualTo jjtn004 = new LessThanEqualTo(JJTLESSTHANEQUALTO);
                                            boolean jjtc004 = true;
                                            jjtree.openNodeScope(jjtn004);
                                          }
                                          try {
/*@egen*//*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn004, true);
                                            jjtc004 = false;
                                          }
/*@egen*/ {jjtn004.value = t.image;}/*@bgen(jjtree)*/
                                          } finally {
                                            if (jjtc004) {
                                              jjtree.closeNodeScope(jjtn004, true);
                                            }
                                          }
/*@egen*/                 
|   t = <GREATER_THAN> expression()/*@bgen(jjtree) GreaterThan */
                                    {
                                      GreaterThan jjtn005 = new GreaterThan(JJTGREATERTHAN);
                                      boolean jjtc005 = true;
                                      jjtree.openNodeScope(jjtn005);
                                    }
                                    try {
/*@egen*//*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn005, true);
                                      jjtc005 = false;
                                    }
/*@egen*/ {jjtn005.value = t.image;}/*@bgen(jjtree)*/
                                    } finally {
                                      if (jjtc005) {
                                        jjtree.closeNodeScope(jjtn005, true);
                                      }
                                    }
/*@egen*/             
|   t = <GREATER_THAN_EQUAL_TO> expression()/*@bgen(jjtree) GreaterThanEqualTo */
                                             {
                                               GreaterThanEqualTo jjtn006 = new GreaterThanEqualTo(JJTGREATERTHANEQUALTO);
                                               boolean jjtc006 = true;
                                               jjtree.openNodeScope(jjtn006);
                                             }
                                             try {
/*@egen*//*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn006, true);
                                               jjtc006 = false;
                                             }
/*@egen*/ {jjtn006.value = t.image;}/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc006) {
                                                 jjtree.closeNodeScope(jjtn006, true);
                                               }
                                             }
/*@egen*/                    /*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void arg_list()         : {/*@bgen(jjtree) ArgList */
  ArgList jjtn000 = new ArgList(JJTARGLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgList */
    try {
/*@egen*/
    ( nemp_arg_list() )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void nemp_arg_list() : {}
{
   id() ( <COMMA> nemp_arg_list() )?
}

String id()     : {/*@bgen(jjtree) ID */
                   ID jjtn000 = new ID(JJTID);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ID */
  try {
/*@egen*/
  t = <ID>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value = t.image; return t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void number()        : {/*@bgen(jjtree) Number */
                        Number jjtn000 = new Number(JJTNUMBER);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Number */
  try {
/*@egen*/
  t = <NUMBER>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void bool()      : {/*@bgen(jjtree) Bool */
                    Bool jjtn000 = new Bool(JJTBOOL);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Bool */
  try {
/*@egen*/
  t = <TRUE>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { jjtn000.value = t.image; }
| t = <FALSE>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}


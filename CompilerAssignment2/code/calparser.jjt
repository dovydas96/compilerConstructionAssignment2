/*******************************
 ***** SECTION 1 - OPTIONS *****
 *******************************/

options {
    IGNORE_CASE = true;
    JAVA_UNICODE_ESCAPE = true;
    MULTI = true;
    VISITOR = true;
    NODE_DEFAULT_VOID = true;
    NODE_PREFIX = "";
} 


/*********************************
 ***** SECTION 2 - USER CODE *****
 *********************************/

PARSER_BEGIN(CALParser)
import java.io.*;
import java.util.*;

public class CALParser {

    public static SymT symbolTable = new SymT();
    public static String scope = "program";


    public static void main(String[] args) throws ParseException {

        // Initialise parser to read
        CALParser parser;
        if (args.length == 0) {

            System.out.println("Reading from standard input...");
            parser = new CALParser(System.in);

        } 
        else if (args.length == 1) {
            try {
                parser = new CALParser(new java.io.FileInputStream(args[0]));

            } 
            catch (java.io.FileNotFoundException e) {
                System.err.println("File " + args[0] + " not found.");
                return;
            }
        } 
        else {
    
            System.out.println("CAL Parser: Usage is one of:");
            System.out.println("    java CALParser < inputfile");
            System.out.println("OR");
            System.out.println("    java CALParser inputfile");
            return;
        }


    // Parse the file
    try {

        SimpleNode root = parser.program();
        System.out.println("Abstract Syntax Tree:");
        root.dump("");

        // Print Symbol Table
        System.out.println("--------------\n|Symbol Table|\n--------------");            
        symbolTable.printSt();
        
        System.out.println();
        // Semantic Analysis
        Scv scv = new Scv();
        root.jjtAccept(scv, symbolTable);

        // 3 Address Code
        System.out.println("-------------------");
        System.out.println("Three Address Code");
        System.out.println("-------------------");   
        //FileWriter fw = new FileWriter();
        String filename = args[0].substring(0, args[0].lastIndexOf(".")) + ".tac";
        Tacs codeGenerator = new Tacs();
        root.jjtAccept(codeGenerator, null);
        System.out.println("Writing IR to file '"+filename + "'");
        try 
        {

            PrintStream out = new PrintStream(new FileOutputStream(filename)); 
            System.setOut(out);

        }
        catch (FileNotFoundException e) 
        {
            e.printStackTrace();
        }
        root.jjtAccept(codeGenerator, null);

    } 
      catch (ParseException e) 
      {
          System.out.println(e.getMessage());
          System.out.println("Encountered errors during parse.");
      }
    }
}

PARSER_END(CALParser)


/*****************************************
 ***** SECTION 3 - TOKEN DEFINITIONS *****
 *****************************************/

TOKEN_MGR_DECLS :
{
    static int commentNesting = 0;
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
    " "
  | "\t"
  | "\n" 
  | "\r" 
  | "\f" 
}

/* Ingore comments */
SKIP : {
    < "//" ([" "-"~"])* ("\n" | "\r" | "\r\n") >
  |   "/*" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
    "/*" { commentNesting++; }
  | "*/" { commentNesting--;
          if (commentNesting == 0)
              SwitchTo(DEFAULT);
         }
  /* Anything not recognised */
  | <~[]>
}

TOKEN : /* KEYWORDS */
{
    < VARIABLE : "variable" >
  | < CONSTANT : "constant" >
  | < RETURN : "return" >
  | < INTEGER : "integer" >
  | < BOOLEAN : "boolean" >
  | < VOID : "void" >
  | < MAIN : "main" >
  | < IF : "if" >
  | < ELSE : "else" >
  | < TRUE : "true" >
  | < FALSE : "false" >
  | < WHILE : "while" >
  | < SKP : "skip" >
  | < COMMA : "," >
  | < SEMIC : ";" >
  | < COLON : ":" >
  | < ASSIGN : ":=" >
  | < BEGIN : "begin" >
  | < IS : "is" > 
  | < END : "end" >
  | < LBR : "(" >
  | < RBR : ")" >
  | < PLUS : "+" >
  | < MINUS : "-" >
  | < NOT : "~" >
  | < OR : "|" >
  | < AND : "&" >
  | < EQUAL : "=" >
  | < NOT_EQUAL : "!=" >
  | < LESS_THAN : "<" >
  | < LESS_THAN_EQUAL_TO : "<=" >
  | < GREATER_THAN : ">" >
  | < GREATER_THAN_EQUAL_TO : ">=" >
}

TOKEN : /* VALUES */
{
    < #DIGIT: ["0"-"9"] >
  | < NUMBER: ( ("-")? ["1"-"9"] (<DIGIT>)* ) |  "0" >
  | < #LETTER: ["a"-"z"] >
  | < ID: <LETTER> ( <LETTER> | <DIGIT> | "_" )* >
}


TOKEN : /* Anything not recognised so far */
{
    < OTHER : ~[] >
}

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/

SimpleNode program() #Program : {}
{
    decl_list() function_list() main() <EOF> { return jjtThis; }
}

void decl_list() : {}
{
    [decl() <SEMIC> decl_list()]
}

void decl() : {}
{
    var_decl()
|   const_decl()
}

void var_decl() #Var : {Token t; String id; String type;}
{
    t = <VARIABLE> id = id() <COLON> type = type() { jjtThis.value = t.image; symbolTable.put(id,type,"var",scope); }
}

void const_decl() #Const :  {Token t; String id; String type;}
{
  t = <CONSTANT> id = id() <COLON> type = type() <ASSIGN> expression() {jjtThis.value = t.image; symbolTable.put(id,type,"const",scope);}
}


void function_list() : {}
{
    ( (function() function_list()) )?
}

void function() #Function : {Token t; String type; String id;}
{
    type = type() id = id() {symbolTable.put(id,type,"function",scope);
    scope=id; }
    <LBR> parameter_list() <RBR>
    <IS>
    decl_list()
    <BEGIN>
    statement_block()
    <RETURN> <LBR> ( expression() )? <RBR> <SEMIC>
    <END>
}

String type() #Type : {Token t; }
{
    t = <INTEGER> { jjtThis.value = t.image; return t.image; }
|   t = <BOOLEAN> { jjtThis.value = t.image; return t.image;}
|   t = <VOID> {jjtThis.value = t.image; return t.image;}
}

void parameter_list() : {}
{
    ( nemp_parameter_list() )?
}

void nemp_parameter_list() #NParamList() : {Token t; String type; String id;}
{
    id = id() <COLON> type = type() nemp_parameter_list_choice()
    { symbolTable.put(id,type,"param",scope); }
}

void nemp_parameter_list_choice() : {}
{
    ( <COMMA> nemp_parameter_list() )?
}

void main() #Main : {}
{
    {scope = "main";}
    <MAIN>
    <BEGIN>
    decl_list()
    statement_block()
    <END>
}

void statement_block() : {}
{
    ( statement() statement_block() )?
}

void statement() #Statement : {Token t;}
{
    id() statement_choice()    
|   <BEGIN> statement_block() <END>
|   t = <IF> condition() <BEGIN> statement_block() <END> <ELSE> <BEGIN> statement_block() <END> {jjtThis.value = t.image;}
|   t = <WHILE> condition() <BEGIN> statement_block() <END> {jjtThis.value = t.image;}
|   <SKP> <SEMIC>

}

void statement_choice() : {Token t;}
{
    t = <ASSIGN> expression() <SEMIC> {jjtThis.value=t.image;} #Assign
|   t = <LBR> arg_list() <RBR> <SEMIC> #ArgAssign
|   {}

}

void expression() : {}
{
    fragment() ( binary_arith_op() fragment() )?
}


void binary_arith_op() : {Token t;}
{
    t = <PLUS> {jjtThis.value = t.image; } #Add
  | t = <MINUS> {jjtThis.value = t.image; } #Subtract
}

void fragment() : {Token t;}
{
    (t = <ID> ( LOOKAHEAD(2) <LBR> arg_list() <RBR> )? {jjtThis.value = t.image;}) #FuncReturn
|   <MINUS> id() #Subtract
|   number()
|   bool()
|   <BEGIN> expression() <END>
}


void condition() : {}
{
    condition_simple() condition_choice()
}

void condition_choice()  : {Token t;}
{
    t = <AND> condition() {jjtThis.value = t.image; } #AndCon
|   t = <OR> condition() {jjtThis.value = t.image;} #OrCon
|   {}
}

void condition_simple() : {}
{
    <NOT> condition()
|   LOOKAHEAD(2) <LBR> condition() <RBR>
|   expression() comp_op() condition_choice()
}

void comp_op() #Comp : {Token t;}
{
    t = <EQUAL> expression()  {jjtThis.value = t.image;} #Equal
|   t = <NOT_EQUAL> expression() {jjtThis.value = t.image;} #NotEqual
|   t = <LESS_THAN> expression() {jjtThis.value = t.image;} #LessThan
|   t = <LESS_THAN_EQUAL_TO> expression() {jjtThis.value = t.image;} #LessThanEqualTo
|   t = <GREATER_THAN> expression() {jjtThis.value = t.image;} #GreaterThan
|   t = <GREATER_THAN_EQUAL_TO> expression() {jjtThis.value = t.image;} #GreaterThanEqualTo
}

void arg_list() #ArgList: {}
{
    ( nemp_arg_list() )?
}

void nemp_arg_list() : {}
{
   id() ( <COMMA> nemp_arg_list() )?
}

String id() #ID : {Token t;}
{
  t = <ID> {jjtThis.value = t.image; return t.image; } 
}

void number() #Number: {Token t;}
{
  t = <NUMBER> {jjtThis.value = t.image;}
}

void bool() #Bool: {Token t;}
{
  t = <TRUE> { jjtThis.value = t.image; }
| t = <FALSE> { jjtThis.value = t.image; }

}

